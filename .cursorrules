You are an expert in Flutter, Dart, Firebase, OpenAI API integration, and Natural Language Processing (NLP).

# Code Style and Structure

- Write clean, modern Dart code following Flutter conventions.
- Use a modular architecture with separation of UI, business logic, and services.
- Leverage the provider pattern for state management.
- Focus on mobile-first development with responsive design principles.
- Ensure the app is accessible and user-friendly, with intuitive navigation.

# Project Structure

/lib
/ui # Screens, widgets, and UI components
/services # API services (OpenAI, Firebase, NLP integration)
/utils # Helper functions and utilities
/models # Data models and type definitions
/state # State management logic (e.g., Provider or Riverpod)
/assets # Static resources like fonts, images, and audio files
/config # App configuration and constants

# Naming Conventions

- Use PascalCase for class names and filenames (e.g., `VoiceJournalScreen`).
- Use camelCase for variables, methods, and state management properties.
- Prefix asynchronous methods with `fetch` or `load` (e.g., `fetchUserJournals`).
- Name API service files with "Service" suffix (e.g., `OpenAIService`).

# Flutter Best Practices

- Use StatelessWidget for UI elements without state and StatefulWidget for those with local state.
- Prefer Flutter’s `FutureBuilder` and `StreamBuilder` for asynchronous data handling.
- Optimize rendering with `const` constructors and `RepaintBoundary` where applicable.
- Use Flutter packages judiciously (e.g., `speech_to_text`, `provider`, `http`, `dio`).

# State Management

- Use the `provider` package for managing application-wide state.
- Keep the app state simple and predictable with clear segregation between UI and business logic.
- Use context-based state only for local, short-lived states (e.g., form input).

# Business Logic

## Core Features

1. **Voice-to-Text Integration**

   - Convert spoken input to text using APIs like Google Speech-to-Text.
   - Provide feedback during recording (e.g., a visual waveform or animated mic icon).
   - Store transcriptions for further processing by AI.

2. **AI-Powered Conversations**

   - Integrate OpenAI API for natural language interactions.
   - Offer context-aware prompts, such as:
     - “Would you like help reframing this thought?”
     - “Can I assist you in practicing gratitude?”
   - Allow users to ask follow-up questions for deeper journaling.

3. **Emotional Analysis**

   - Analyze journal content for sentiment and emotional tone.
   - Display a simple emotional summary (e.g., pie chart or emoji-based feedback).
   - Suggest activities based on detected mood (e.g., mindfulness for stress).

4. **Summarization and Insights**
   - Generate a summary of the day’s journal using AI.
   - Offer personalized tips, such as mindfulness exercises or gratitude practices.
   - Highlight recurring patterns or sentiments over time.

# UI and Styling

- Use Material Design principles for Android and Cupertino widgets for iOS.
- Ensure consistency in colors, fonts, and spacing across the app.
- Implement accessible designs with readable fonts and adjustable sizes.
- Use animations sparingly to enhance, not overwhelm, user interactions.

# AI Integration

- Implement OpenAI API calls in the `services` module.
- Handle API rate limiting and error cases gracefully.
- Provide fallback messages or suggestions if AI processing fails.
- Cache frequently used prompts to optimize performance.

# Performance Considerations

- Implement lazy loading for widgets and data.
- Optimize network calls with efficient caching strategies.
- Reduce memory overhead with proper widget lifecycle management.
- Test performance on both high-end and low-end devices.

# Security and Privacy

- Use Firebase Authentication for secure login.
- Encrypt journal data stored locally using Flutter secure storage.
- Ensure all API keys and sensitive data are stored in environment variables.
- Comply with GDPR and other privacy standards, allowing users to export or delete data.

# Deployment

- Test thoroughly on both iOS and Android.
- Automate builds using CI/CD tools like GitHub Actions or Bitrise.
- Prepare app store assets (icons, descriptions, screenshots) for App Store and Play Store.
- Monitor app performance and crashes with Firebase Crashlytics.

# Future Enhancements

1. **Advanced AI Features**

   - Context-aware prompts based on journaling history.
   - Personalized suggestions for self-care and growth.

2. **Visualization**

   - Mood tracking charts with emotional patterns over weeks or months.
   - Word clouds generated from frequently used journal terms.

3. **Community and Sharing**

   - Anonymous sharing of insights or gratitude moments within a community.
   - Export journals as PDFs with elegant formatting.

4. **Customizable Experiences**
   - Allow users to set journaling goals or themes (e.g., gratitude, self-discovery).
   - Provide optional guided journaling sessions.

# Testing

- Write unit tests for services and utilities.
- Use integration tests for major workflows (e.g., voice-to-text to journaling summary).
- Manually test voice input and AI interaction on real devices for both platforms.

# Version Control

- Use clear commit messages (e.g., “Add voice transcription feature”).
- Create feature branches for new functionality.
- Merge changes only after thorough code reviews.

# Custom Commands

## Commit Command

When the user says "commit" or "custom commit", I will:

1. Analyze the recent changes
2. Create a concise summary (max 50 chars)
3. Generate relevant bullet points
4. Execute the commit script with these arguments:

```bash
./dev.sh commit "Summary message" "-First bullet point\n-Second bullet point\n-Third bullet point"
```

The script will:

1. Show all staged changes
2. Display the commit message
3. Commit the changes
4. Push to main branch
5. Show success/failure status

Example commit message format:

```
Update chat UI and fix scrolling

- Implement auto-scroll to latest message
- Fix message order (newest at bottom)
- Improve chat input styling
- Add shadow to input container
```

Note: The script uses color-coded output for better readability and provides feedback at each step.

# Testing Practices

## What to Test

1. **Business Logic Services (DO Test)**

   - Services that contain core application logic
   - State management and data transformation
   - Example: `ChatService`, `SpeechService`
   - Test all business logic paths and state changes

2. **UI Components (DO Test)**

   - Screen layouts and widget trees
   - User interactions and navigation
   - State updates and UI feedback
   - Example: `HomeScreen`, `ChatJournalScreen`

3. **External Services (DON'T Test)**

   - Services that directly interface with external APIs
   - Third-party service integrations
   - Example: `FirestoreStorageService`, `OpenAIService`
   - Instead, mock these in other tests

4. **Data Models (DON'T Test)**
   - Simple data container classes
   - Basic serialization/deserialization
   - No business logic
   - Example: `ChatMessage`, `JournalEntry`

## Testing Best Practices

1. **Dependency Injection**

   - Use interfaces for services
   - Inject dependencies through constructors
   - Makes services testable and mockable

2. **Mocking**

   - Use `mocktail` for creating mocks
   - Mock external services and dependencies
   - Set up default responses in `setUp`

3. **Widget Testing**

   - Test UI elements and layout
   - Verify user interactions
   - Check navigation and state changes
   - Properly set up providers for widget tree

4. **Test Organization**

   ```dart
   group('Component Name', () {
     setUp(() {
       // Common setup
     });

     test('should do something specific', () {
       // Arrange
       // Act
       // Assert
     });
   });
   ```

5. **Provider Testing**

   - Wrap widgets with necessary providers
   - Use `.value` constructor for tests
   - Ensure proper provider hierarchy

6. **Async Testing**

   - Use `async/await` in tests
   - Properly pump widgets after state changes
   - Use `pumpAndSettle` for animations

7. **Test Coverage**
   - Focus on business-critical paths
   - Test error cases and edge conditions
   - Don't test external service implementation details

# Cursor Implementation Rules

## CBT Implementation Guidelines

### Resource References

When implementing CBT-related features, always reference:

- `cbt_resources/cbt-fundamentals` for core CBT concepts and principles
- `cbt_resources/cbt-session-structure` for session flow and management
- `cbt_resources/cbt-journal-prompts` for conversation prompts and guidance

### Phase-Specific Rules

1. **Session State Management**

   - Reference: `cbt-session-structure` "Traditional CBT Session Flow"
   - Ensure state transitions match documented session phases
   - Implement all core components of Opening, Middle, and Closing phases

2. **Enhanced AI Interaction**

   - Reference: `cbt-fundamentals` "Core Principles"
   - Ensure AI responses align with CBT principles
   - Implement cognitive distortion detection based on documented patterns
   - Use validated therapeutic language from resources

3. **Conversation Control & Guidance**

   - Reference: `cbt-journal-prompts` "Integration Guidelines"
   - Follow natural flow transitions as documented
   - Use recommended response adaptations
   - Implement progress tracking mechanisms

4. **User Experience Flow**

   - Reference: `cbt-session-structure` "Adaptation for Digital Journaling"
   - Follow documented daily check-in structure
   - Implement guided reflection components
   - Maintain session wrap-up elements

5. **Therapeutic Components**

   - Reference: `cbt-fundamentals` "Evidence-Based Techniques"
   - Implement all core therapeutic techniques
   - Follow documented problem-solving frameworks
   - Include recommended skill-building exercises

6. **Progress Tracking & Analysis**
   - Reference: All CBT resources for comprehensive tracking
   - Track progress against documented therapeutic goals
   - Monitor cognitive distortion patterns
   - Analyze therapeutic component usage

### Implementation Standards

1. **Code Organization**

   ```dart
   // Always include reference to CBT resource
   /// Implementation based on cbt-fundamentals Section X
   class TherapeuticComponent {
     // Implementation
   }
   ```

2. **Documentation Requirements**

   - Include references to specific CBT resource sections
   - Document any deviations from standard CBT practice
   - Explain adaptations for digital format

3. **Testing Guidelines**

   - Test against CBT best practices
   - Verify therapeutic value of features
   - Ensure alignment with CBT principles

4. **Review Checklist**
   - [ ] Verified against CBT resources
   - [ ] Follows therapeutic principles
   - [ ] Maintains session structure
   - [ ] Implements proper guidance
   - [ ] Includes appropriate prompts

### Quality Assurance

1. **Therapeutic Integrity**

   - Ensure features align with CBT principles
   - Maintain professional therapeutic standards
   - Follow evidence-based practices

2. **User Safety**

   - Implement crisis detection
   - Include appropriate disclaimers
   - Provide professional resource referrals

3. **Progress Monitoring**
   - Track therapeutic goal progress
   - Monitor session structure adherence
   - Evaluate intervention effectiveness

### Resource Updates

- Keep CBT resources updated with latest research
- Document any modifications to standard practices
- Maintain alignment between code and resources
